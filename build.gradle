/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright 2019, Green Hope Falcons
 */

import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "edu.wpi.first.GradleRIO" version "2020.2.2"
    id "com.diffplug.gradle.spotless" version "3.27.0"
}

def kRobotMainClass = "org.ghrobotics.frc2020.MainKt"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

// Defining my dependencies. In this case, WPILib (+ friends)
dependencies {
    // WPILib dependencies
    compile wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    // Vendor dependencies
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    // Unit testing
    testCompile 'junit:junit:4.12'

    // We need to add the Kotlin stdlib in order to use most Kotlin language features.
    compile "org.jetbrains.kotlin:kotlin-stdlib"

    // Gson
    compile "com.github.salomonbrys.kotson:kotson:2.5.0"

    // Falcon Library
    compile "org.ghrobotics.FalconLibrary:core:2020.2.2"
    compile "org.ghrobotics.FalconLibrary:wpi:2020.2.2"
    compile "org.ghrobotics.FalconLibrary:vendorREV:2020.2.2"
    compile "org.ghrobotics.FalconLibrary:vendorCTRE:2020.2.2"
    compile "org.ghrobotics.FalconLibrary:vendorNAVX:2020.2.2"
}

spotless {
    kotlin {
        ktlint().userData(['insert_final_newline': 'true'])
        licenseHeaderFile "LicenseHeader.txt"
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(kRobotMainClass)
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

wrapper {
    gradleVersion = "6.0.1"
}
